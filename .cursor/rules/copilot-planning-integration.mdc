---
alwaysApply: false
description: Integration of GitHub Copilot planning with existing planning methodologies
---
# GitHub Copilot Planning Integration

## System Integration Overview

### Copilot Planning Ecosystem
You WILL integrate GitHub Copilot planning with existing planning systems:

**Copilot Implementation Plans**:
- Generate AI-optimized, deterministic implementation plans
- Use exact template structure with status badges
- Implement comprehensive tool integration
- Support automated execution and validation

**Strategic Planning Integration**:
- Align Copilot plans with strategic objectives
- Connect implementation details to business goals
- Maintain consistency across planning methodologies
- Ensure Copilot plans support broader strategic initiatives

**Agile Work Item Integration**:
- Map Copilot tasks to agile work item hierarchy
- Connect implementation tasks to user stories
- Link technical tasks to enabler work items
- Maintain traceability from epic to implementation

**Project Management Integration**:
- Create GitHub issues from Copilot plan tasks
- Implement automated status tracking
- Enable Kanban board integration
- Support sprint planning and capacity management

## Enhanced Planning Workflow

### Integrated Planning Process
You WILL create a comprehensive planning workflow that combines all methodologies:

**Phase 1: Strategic Alignment**
1. **Business Context**: Define business objectives and success metrics
2. **Epic Definition**: Create epics with clear business value
3. **Feature Planning**: Break epics into user-facing features
4. **Strategic Validation**: Ensure alignment with company goals

**Phase 2: Agile Work Item Creation**
1. **Story Writing**: Create INVEST-compliant user stories
2. **Enabler Identification**: Define technical infrastructure needs
3. **Dependency Mapping**: Establish blocking and dependent relationships
4. **Estimation**: Apply story points and t-shirt sizing

**Phase 3: Copilot Plan Generation**
1. **AI-Optimized Planning**: Generate deterministic implementation plans
2. **Task Specification**: Create detailed, executable tasks with file paths
3. **Tool Integration**: Select appropriate Copilot tools for execution
4. **Validation Criteria**: Define automated verification methods

**Phase 4: GitHub Integration**
1. **Issue Creation**: Generate GitHub issues from plan tasks
2. **Board Configuration**: Set up Kanban board with appropriate columns
3. **Automation Setup**: Configure status updates and notifications
4. **Sprint Assignment**: Assign tasks to appropriate sprint cycles

**Phase 5: Execution and Monitoring**
1. **Copilot Execution**: Execute plans using AI-optimized workflows
2. **Progress Tracking**: Monitor task completion and quality metrics
3. **Issue Management**: Update GitHub issues based on execution status
4. **Quality Validation**: Ensure all quality gates are passed

## Copilot-Optimized Template Integration

### Enhanced Implementation Plan Template
You WILL use this integrated template that combines all planning methodologies:

```markdown
---
goal: [Concise Title Describing Implementation Goal]
version: [Optional: e.g., 1.0, Date]
date_created: [YYYY-MM-DD]
last_updated: [Optional: YYYY-MM-DD]
owner: [Optional: Team/Individual responsible]
status: 'Completed'|'In progress'|'Planned'|'Deprecated'|'On Hold'
tags: [Optional: feature, upgrade, chore, architecture, migration, bug]
mode: 'agent'
description: "[Copilot-optimized description]"
tools: ["[exact tools needed for execution]"]
epic: [Epic name or identifier]
feature: [Feature name or identifier]
---

# Introduction
![Status: Completed](https://img.shields.io/badge/status-Completed-brightgreen)
[A short concise introduction to the plan and the goal it is intended to achieve.]

## 1. Strategic Context
### Business Objective
[Connect to epic-level business goals]

### Success Metrics
[Link to epic success metrics]

### Feature Context
[Connect to feature requirements]

## 2. Agile Work Item Mapping
### Epic Linkage
- **Epic**: #{epic-issue-number} - [Epic name]
- **Business Value**: [Epic business value]
- **Success Metrics**: [Epic success metrics]

### Feature Linkage
- **Feature**: #{feature-issue-number} - [Feature name]
- **User Stories**: [List of story issue numbers]
- **Technical Enablers**: [List of enabler issue numbers]

### Story Mapping
- **Primary Story**: #{story-issue-number} - [Story title]
- **Acceptance Criteria**: [Key acceptance criteria]
- **Technical Tasks**: [List of implementation tasks]

## 3. Requirements & Constraints
[Explicitly list all requirements & constraints]
- **REQ-001**: [Functional requirement linked to story]
- **SEC-001**: [Security requirement]
- **PERF-001**: [Performance requirement]
- **CON-001**: [Technical constraint]
- **GUD-001**: [Guideline from coding standards]

## 4. Implementation Steps
### Implementation Phase 1 - GOAL-001: [Measurable phase goal]
| Task | Description | Story | Enabler | Test | Completed | Date | GitHub Issue |
|------|-------------|-------|---------|------|-----------|------|---------------|
| TASK-001 | [Task with specific file paths, function names, line numbers] | #{story} | #{enabler} | #{test} | âœ… | 2025-04-25 | #{task-issue} |

## 5. GitHub Issue Mapping
### Epic Issues
- **Epic Issue**: #{epic-issue-number} - [Epic name]

### Feature Issues
- **Feature Issue**: #{feature-issue-number} - [Feature name]

### Story and Enabler Issues
- **User Stories**: [List of story issue numbers and titles]
- **Technical Enablers**: [List of enabler issue numbers and titles]
- **Test Cases**: [List of test issue numbers and titles]

### Task Issues
- **Implementation Tasks**: [List of task issue numbers and titles]
- **Automation Status**: [GitHub Actions configuration status]

## 6. Dependencies
[Dependencies that need addressing]
- **DEP-001**: [External dependency with version]
- **BLOCKS-001**: #{issue-number} - [Blocking relationship]
- **BLOCKED-BY-001**: #{issue-number} - [Blocked by relationship]

## 7. Files
[Files affected by implementation]
- **FILE-001**: [File with exact path and modification scope]
- **STORY-001**: [Stories that modify this file]
- **ENABLER-001**: [Enablers that affect this file]

## 8. Testing
[Tests needed for verification]
- **TEST-001**: [Test with automated verification and GitHub issue link]
- **AUTOMATION**: [Test automation framework and tools]
- **COVERAGE**: [Test coverage requirements]

## 9. Definition of Ready & Done
### Definition of Ready (DoR)
- [ ] Business value clearly identified (Epic linkage)
- [ ] Acceptance criteria defined and testable (Story linkage)
- [ ] Dependencies identified and resolved (GitHub blocking)
- [ ] Estimated and sized appropriately (Story points)
- [ ] Technical approach agreed upon (Enabler linkage)
- [ ] UX/design requirements complete

### Definition of Done (DoD)
- [ ] Code implemented and functional
- [ ] Unit tests written and passing
- [ ] Integration tests passing
- [ ] Code review approved
- [ ] Documentation updated
- [ ] UX requirements implemented
- [ ] Accessibility requirements met
- [ ] Performance requirements met
- [ ] GitHub issues updated and closed

## 10. Risks & Assumptions
[Risks and assumptions related to implementation]
- **RISK-001**: [Risk with mitigation strategy and GitHub issue tracking]
- **ASSUMPTION-001**: [Assumption with validation plan]

## 11. Sprint Planning
### Sprint Capacity
- **Team Velocity**: [Average story points per sprint]
- **Sprint Duration**: [2-week sprints recommended]
- **Buffer Allocation**: [20% for unexpected work]

### Sprint Goals
- **Sprint {N} Goal**: [Main deliverable for this sprint]
- **Stories in Sprint**: [List of stories with point estimates]
- **Total Commitment**: [Story points committed]

## 12. Tool Integration & Automation
### Copilot Tool Configuration
```markdown
tools: ["editFiles", "search", "codebase", "runTasks", "problems"]
# Selected for optimal execution of implementation tasks
```

### GitHub Actions Automation
```yaml
name: Implementation Plan Execution
on:
  issues:
    types: [opened, closed, labeled]
  pull_request:
    types: [opened, closed]

jobs:
  plan-execution:
    runs-on: ubuntu-latest
    steps:
      - name: Execute Plan Tasks
        uses: actions/github-script@v7
        # Execute plan tasks based on issue status
      - name: Update Plan Status
        uses: actions/github-script@v7
        # Update implementation plan status
      - name: Quality Validation
        uses: actions/github-script@v7
        # Run automated quality checks
```

## 13. Related Specifications / Further Reading
[Link to related specifications with context]
[Link to epic documentation]
[Link to feature requirements]
[Link to technical breakdown]
[Link to GitHub project board]
```

## Integration Benefits

### Unified Planning Approach
You WILL create a seamless integration between all planning methodologies:

**Strategic Alignment**:
- Copilot plans connected to epic business objectives
- Implementation details linked to strategic goals
- Consistent terminology across all planning artifacts

**Agile Integration**:
- Copilot tasks mapped to agile work item hierarchy
- GitHub issues automatically created from plan tasks
- Sprint planning integrated with implementation execution

**Quality Assurance**:
- DoR/DoD criteria applied to all implementation tasks
- Automated validation integrated into execution
- Quality gates enforced throughout the process

**Traceability**:
- Complete traceability from epic to implementation
- GitHub issues linked to specific implementation tasks
- Automated status tracking and reporting

## Implementation Plan Generation Workflow

### Enhanced Plan Creation Process
You WILL follow this integrated plan generation workflow:

**Phase 1: Strategic Context Building**
1. **Business Alignment**: Connect to epic objectives and success metrics
2. **Feature Context**: Understand feature requirements and user stories
3. **Technical Context**: Review architecture and technical constraints
4. **Quality Standards**: Define applicable coding and testing standards

**Phase 2: Agile Work Item Integration**
1. **Story Mapping**: Map implementation tasks to user stories
2. **Enabler Connection**: Link technical tasks to enabler work items
3. **Dependency Analysis**: Identify blocking and dependent relationships
4. **Estimation Integration**: Apply story points and sizing to tasks

**Phase 3: Copilot Plan Generation**
1. **Task Specification**: Create detailed, executable tasks with file paths
2. **Tool Selection**: Choose appropriate Copilot tools for execution
3. **Validation Criteria**: Define automated verification methods
4. **Error Handling**: Implement comprehensive error recovery

**Phase 4: GitHub Integration**
1. **Issue Creation**: Generate GitHub issues from plan tasks
2. **Board Setup**: Configure Kanban board with appropriate workflows
3. **Automation Configuration**: Set up status updates and notifications
4. **Sprint Assignment**: Assign tasks to appropriate sprint cycles

**Phase 5: Quality and Validation**
1. **DoR/DoD Validation**: Ensure all quality criteria are met
2. **Testing Integration**: Connect tests to implementation tasks
3. **Review Process**: Implement code review and approval workflows
4. **Documentation**: Ensure all documentation is updated

## Tool Integration Optimization

### Enhanced Tool Selection Strategy
You WILL select tools based on integrated planning requirements:

**Comprehensive Implementation Tools**:
```markdown
tools: ["editFiles", "search", "codebase", "changes", "runTasks", "problems"]
# Complete implementation with code analysis, modification, and validation
```

**Quality Assurance Tools**:
```markdown
tools: ["findTestFiles", "testFailure", "runTasks", "problems", "runTests"]
# Comprehensive testing with failure analysis and validation
```

**Integration and Deployment Tools**:
```markdown
tools: ["runCommands", "runTasks", "githubRepo", "vscodeAPI", "extensions"]
# Build, deploy, and integrate with external systems
```

**Analysis and Monitoring Tools**:
```markdown
tools: ["usages", "searchResults", "vscodeAPI", "terminalLastCommand", "problems"]
# Deep analysis, dependency tracking, and issue resolution
```

### Tool Usage Pattern Integration
You WILL create integrated tool usage patterns:

**Full Development Lifecycle**:
```markdown
1. `codebase` - Understand project architecture and patterns
2. `search` - Find existing implementations and requirements
3. `githubRepo` - Research similar implementations and issues
4. `editFiles` - Create new files and modify existing code
5. `runTasks` - Execute build and compilation processes
6. `runTests` - Run comprehensive test suites
7. `problems` - Validate implementation and resolve issues
8. `changes` - Track modifications and create change documentation
```

## Metrics and Reporting Integration

### Comprehensive Metrics Collection
You WILL collect and integrate metrics across all planning systems:

**Strategic Metrics**:
- Business value delivery against epic objectives
- Feature adoption and user satisfaction rates
- Strategic alignment with company goals

**Agile Metrics**:
- Sprint velocity and predictability
- Story completion rates and cycle times
- Team capacity utilization and efficiency

**Implementation Metrics**:
- Task completion rates and execution times
- Code quality metrics (linting, coverage, complexity)
- Error rates and bug discovery rates

**Quality Metrics**:
- Definition of Done compliance rates
- Test coverage and quality scores
- Code review completion and approval rates
- Performance benchmark achievement

### Integrated Reporting Dashboard
You WILL create comprehensive reporting that integrates all systems:

**Executive Dashboard**:
- Epic progress and business value delivery
- Strategic objective achievement
- Key performance indicators and trends

**Project Management Dashboard**:
- Sprint progress and velocity trends
- Issue burndown and completion rates
- Team capacity and resource utilization

**Development Dashboard**:
- Implementation task completion rates
- Code quality and technical debt metrics
- Test coverage and quality trends

**Quality Dashboard**:
- Definition of Done compliance tracking
- Test results and failure analysis
- Code review metrics and feedback

## Continuous Improvement Integration

### Process Optimization
You WILL implement continuous improvement across all planning systems:

**Planning Process Review**:
- Analyze planning accuracy and estimation quality
- Review tool selection and usage effectiveness
- Assess template and process efficiency
- Identify bottlenecks and improvement opportunities

**Quality Process Enhancement**:
- Monitor DoR/DoD compliance and effectiveness
- Track quality gate success rates
- Analyze error patterns and root causes
- Implement preventive measures and improvements

**Team Performance Optimization**:
- Track team velocity and productivity trends
- Monitor collaboration and communication effectiveness
- Assess tool adoption and training needs
- Implement targeted improvements and training

### Knowledge Management
You WILL create a comprehensive knowledge base:

**Planning Templates Library**:
- Standardized templates for different project types
- Best practice examples and case studies
- Tool configuration and usage guides
- Process documentation and workflows

**Success Pattern Database**:
- Documented successful implementation patterns
- Common challenges and solutions
- Tool usage best practices
- Quality assurance techniques

**Lessons Learned Repository**:
- Post-implementation reviews and analysis
- Process improvement recommendations
- Tool enhancement suggestions
- Team feedback and insights

This integrated planning system creates a comprehensive, AI-optimized workflow that connects strategic planning, agile methodologies, Copilot implementation, and GitHub project management into a unified, efficient development process with complete traceability and quality assurance.
