---
alwaysApply: false
description: Agile work item hierarchy and templates for GitHub project management
---
# Agile Work Item Hierarchy

## Work Item Structure

### Epic Level (Milestone Level)
**Purpose**: Large business capability spanning multiple features
**Scope**: Multiple sprints, significant business value
**Template Location**: `/docs/ways-of-work/plan/{epic-name}/epic.md`

### Feature Level (Deliverable User-Facing)
**Purpose**: User-facing functionality within an epic
**Scope**: 1-2 sprints, complete user workflow
**Template Location**: `/docs/ways-of-work/plan/{epic-name}/{feature-name}.md`

### Story Level (User-Focused Requirements)
**Purpose**: Independent value-delivering requirement
**Scope**: 1-5 days, single user interaction
**INVEST Criteria**: Independent, Negotiable, Valuable, Estimable, Small, Testable

### Enabler Level (Technical Infrastructure)
**Purpose**: Technical work supporting stories
**Scope**: Technical setup, architecture, infrastructure
**Categories**: API development, database design, CI/CD setup

### Test Level (Quality Assurance)
**Purpose**: Quality validation for stories and enablers
**Scope**: Unit tests, integration tests, E2E tests
**Types**: Automated testing, manual testing, performance testing

### Task Level (Implementation Details)
**Purpose**: Specific implementation work
**Scope**: Hours to days, technical implementation
**Granularity**: Single function, component, or configuration change

## Work Item Templates

### Epic Issue Template
```markdown
# Epic: {Epic Name}

## Epic Description
{Epic summary from business requirements}

## Business Value
- **Primary Goal**: {Main business objective}
- **Success Metrics**: {KPIs and measurable outcomes}
- **User Impact**: {How users will benefit}

## Epic Acceptance Criteria
- [ ] {High-level requirement 1}
- [ ] {High-level requirement 2}
- [ ] {High-level requirement 3}

## Features in this Epic
- [ ] #{feature-issue-number} - {Feature Name}

## Definition of Done
- [ ] All feature stories completed
- [ ] End-to-end testing passed
- [ ] Performance benchmarks met
- [ ] Documentation updated
- [ ] User acceptance testing completed

## Labels
`epic`, `{priority-level}`, `{value-tier}`

## Milestone
{Release version/date}

## Estimate
{Epic-level t-shirt size: XS, S, M, L, XL, XXL}
```

### Feature Issue Template
```markdown
# Feature: {Feature Name}

## Feature Description
{Feature summary from PRD}

## User Stories in this Feature
- [ ] #{story-issue-number} - {User Story Title}
- [ ] #{story-issue-number} - {User Story Title}

## Technical Enablers
- [ ] #{enabler-issue-number} - {Enabler Title}
- [ ] #{enabler-issue-number} - {Enabler Title}

## Dependencies
**Blocks**: {List of issues this feature blocks}
**Blocked by**: {List of issues blocking this feature}

## Acceptance Criteria
- [ ] {Feature-level requirement 1}
- [ ] {Feature-level requirement 2}

## Definition of Done
- [ ] All user stories delivered
- [ ] Technical enablers completed
- [ ] Integration testing passed
- [ ] UX review approved
- [ ] Performance testing completed

## Labels
`feature`, `{priority-level}`, `{value-tier}`, `{component-name}`

## Epic
#{epic-issue-number}

## Estimate
{Story points or t-shirt size}
```

### User Story Issue Template
```markdown
# User Story: {Story Title}

## Story Statement
As a **{user type}**, I want **{goal}** so that **{benefit}**.

## Acceptance Criteria
- [ ] {Specific testable requirement 1}
- [ ] {Specific testable requirement 2}
- [ ] {Specific testable requirement 3}

## Technical Tasks
- [ ] #{task-issue-number} - {Implementation task}
- [ ] #{task-issue-number} - {Integration task}

## Testing Requirements
- [ ] #{test-issue-number} - {Test implementation}

## Dependencies
**Blocked by**: {Dependencies that must be completed first}

## Definition of Done
- [ ] Acceptance criteria met
- [ ] Code review approved
- [ ] Unit tests written and passing
- [ ] Integration tests passing
- [ ] UX design implemented
- [ ] Accessibility requirements met

## Labels
`user-story`, `{priority-level}`, `frontend/backend/fullstack`, `{component-name}`

## Feature
#{feature-issue-number}

## Estimate
{Story points: 1, 2, 3, 5, 8}
```

### Technical Enabler Issue Template
```markdown
# Technical Enabler: {Enabler Title}

## Enabler Description
{Technical work required to support user stories}

## Technical Requirements
- [ ] {Technical requirement 1}
- [ ] {Technical requirement 2}

## Implementation Tasks
- [ ] #{task-issue-number} - {Implementation detail}
- [ ] #{task-issue-number} - {Infrastructure setup}

## User Stories Enabled
This enabler supports:
- #{story-issue-number} - {Story title}
- #{story-issue-number} - {Story title}

## Acceptance Criteria
- [ ] {Technical validation 1}
- [ ] {Technical validation 2}
- [ ] Performance benchmarks met

## Definition of Done
- [ ] Implementation completed
- [ ] Unit tests written
- [ ] Integration tests passing
- [ ] Documentation updated
- [ ] Code review approved

## Labels
`enabler`, `{priority-level}`, `infrastructure/api/database`, `{component-name}`

## Feature
#{feature-issue-number}

## Estimate
{Story points or effort estimate}
```

### Test Issue Template
```markdown
# Test: {Test Title}

## Test Description
{Quality assurance work for validating stories/enablers}

## Test Scope
- **Type**: {Unit/Integration/E2E/Performance/Security}
- **Coverage**: {What functionality is being tested}
- **Environment**: {Test environment requirements}

## Test Cases
- [ ] {Test case 1 description}
- [ ] {Test case 2 description}
- [ ] {Test case 3 description}

## Test Data Requirements
- [ ] {Test data setup 1}
- [ ] {Test data setup 2}

## Automation Requirements
- [ ] {Automation framework setup}
- [ ] {CI/CD integration requirements}

## Success Criteria
- [ ] All test cases pass
- [ ] Code coverage requirements met
- [ ] Performance benchmarks achieved
- [ ] No critical or high-severity bugs

## Definition of Done
- [ ] Test implementation completed
- [ ] Test automation working
- [ ] Test results documented
- [ ] Code review approved
- [ ] Test maintenance plan created

## Labels
`test`, `{priority-level}`, `{test-type}`, `{component-name}`

## Related Work
#{story-or-enabler-issue-number}

## Estimate
{Story points or effort estimate}
```

## Work Item Hierarchy Visualization

### Mermaid Diagram Template
```mermaid
graph TD
    A[Epic: {Epic Name}] --> B[Feature: {Feature Name}]
    B --> C[Story 1: {User Story}]
    B --> D[Story 2: {User Story}]
    B --> E[Enabler 1: {Technical Work}]
    B --> F[Enabler 2: {Infrastructure}]
    C --> G[Task: Frontend Implementation]
    C --> H[Task: API Integration]
    C --> I[Test: E2E Scenarios]
    D --> J[Task: Component Development]
    D --> K[Task: State Management]
    D --> L[Test: Unit Tests]
    E --> M[Task: Database Schema]
    E --> N[Task: Migration Scripts]
    F --> O[Task: CI/CD Pipeline]
    F --> P[Task: Monitoring Setup]
```

## Estimation Guidelines

### Story Point Scale (Fibonacci)
- **1 point**: Simple change, <4 hours
- **2 points**: Small feature, <1 day
- **3 points**: Medium feature, 1-2 days
- **5 points**: Large feature, 3-5 days
- **8 points**: Complex feature, 1-2 weeks
- **13+ points**: Epic-level work, needs breakdown

### T-Shirt Sizing (Epics/Features)
- **XS**: 1-2 story points total
- **S**: 3-8 story points total
- **M**: 8-20 story points total
- **L**: 20-40 story points total
- **XL**: 40+ story points total (consider breaking down)

### Estimation Best Practices
- **Relative Estimation**: Compare to similar completed work
- **Team Calibration**: Regular estimation accuracy reviews
- **Break Down Large Items**: Split complex work into smaller tasks
- **Consider Complexity Factors**: Risk, uncertainty, technical debt
- **Include All Activities**: Development, testing, documentation, review

## Work Item Relationships

### Dependency Types
- **Blocks**: Work that cannot proceed until this is complete
- **Related**: Work that shares context but not blocking
- **Prerequisite**: Required infrastructure or setup work
- **Parallel**: Work that can proceed simultaneously

### Dependency Management
```mermaid
graph LR
    A[Epic Planning] --> B[Feature Definition]
    B --> C[Enabler Implementation]
    C --> D[Story Development]
    D --> E[Testing Execution]
    E --> F[Feature Delivery]
    G[Infrastructure Setup] --> C
    H[API Design] --> D
    I[Database Schema] --> C
    J[Authentication] --> D
```

## Quality Standards

### Definition of Ready (DoR)
Work items must meet these criteria before being worked on:
- [ ] Clear business value identified
- [ ] Acceptance criteria defined and testable
- [ ] Dependencies identified and resolved
- [ ] Estimated and sized appropriately
- [ ] Technical approach agreed upon
- [ ] UX/design requirements complete

### Definition of Done (DoD)
Work items are complete when all criteria are met:
- [ ] Code implemented and functional
- [ ] Unit tests written and passing
- [ ] Integration tests passing
- [ ] Code review approved
- [ ] Documentation updated
- [ ] UX requirements implemented
- [ ] Accessibility requirements met
- [ ] Performance requirements met

### INVEST Criteria for Stories
- **Independent**: Can be developed separately
- **Negotiable**: Details can be negotiated with stakeholders
- **Valuable**: Delivers clear business value
- **Estimable**: Can be reasonably estimated
- **Small**: Can be completed in one sprint
- **Testable**: Can be validated through testing

This hierarchy provides a structured approach to breaking down work from high-level business objectives down to specific implementation tasks, ensuring traceability, proper estimation, and clear dependencies throughout the development process.
