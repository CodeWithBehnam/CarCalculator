---
alwaysApply: true
description: Core earthquake monitoring project architecture and patterns
---

# Earthquake Monitoring Project Architecture

## Project Overview
This is a real-time earthquake monitoring application that fetches data from USGS feeds and provides interactive visualizations. The project uses Bun runtime with TypeScript, SQLite for data storage, and provides both 2D canvas and 3D Three.js visualizations.

## Core Components

### Entry Point
- **File**: [index.ts](mdc:index.ts)
- **Purpose**: Application bootstrap that starts server and scheduler
- **Pattern**: Single entry point that imports and initializes backend services
- **Key Features**: Server startup, data ingestion scheduler initialization

### Backend Architecture
- **Server**: [src/backend/server.ts](mdc:src/backend/server.ts)
  - Pure Node.js HTTP server (no Express framework)
  - RESTful API endpoints for earthquake data
  - Static file serving from [public/](mdc:public/) directory
  - Custom content-type handling for various file types

### Database Layer
- **File**: [src/backend/db.ts](mdc:src/backend/db.ts) 
- **Database**: SQLite with Bun's native driver
- **Pattern**: Prepared statements for performance and security
- **Configuration**: WAL mode, optimized synchronization settings
- **Schema**: Single `earthquakes` table with time-based indexing

### Data Ingestion
- **File**: [src/backend/ingest.ts](mdc:src/backend/ingest.ts)
- **Source**: USGS CSV feeds (2.5+ magnitude, daily updates)
- **Pattern**: Scheduled ingestion with deduplication using INSERT OR IGNORE
- **Frequency**: Every 2 hours by default, configurable interval

## API Endpoints

### Data Retrieval
- `GET /api/quakes` - Recent earthquakes with time filtering (`sinceHours`, `limit` params)
- `GET /api/quakes-all` - All earthquakes with limit
- `GET /api/count` - Total earthquake count in database
- `POST /api/ingest` - Manual data ingestion trigger

### Static Assets
- `/` - Main 2D canvas visualization ([public/index.html](mdc:public/index.html))
- `/3d.html` - Three.js 3D globe visualization ([public/3d.html](mdc:public/3d.html))
- `/three.mjs` - Proxied Three.js module from node_modules
- Static files served from [public/](mdc:public/) directory

## Frontend Architecture

### 2D Visualization ([public/index.html](mdc:public/index.html))
- Pure HTML5 Canvas with interactive controls
- World map projection with magnitude-based coloring
- Real-time panning, zooming, and dragging
- Responsive design with HUD and control overlays

### 3D Visualization ([public/main.js](mdc:public/main.js))
- Three.js 3D globe with instanced meshes for performance
- Earth texture loading with fallback colors
- Interactive rotation and mouse controls
- Star field background and atmospheric effects

## Key Patterns

### Data Types
```typescript
type EarthquakeRow = {
  eqid: string;           // Unique earthquake identifier
  time_ms: number;        // Unix timestamp in milliseconds
  latitude: number;       // Geographic latitude
  longitude: number;      // Geographic longitude  
  depth_km: number | null; // Depth in kilometers (nullable)
  magnitude: number | null; // Richter magnitude (nullable)
  place: string | null;    // Human-readable location (nullable)
};
```

### Performance Optimizations
- Prepared SQL statements for fast bulk inserts
- Instanced rendering for thousands of earthquake markers
- Time-based data filtering to limit memory usage
- SQLite WAL mode for concurrent read/write performance

### Error Handling
- Graceful degradation when external feeds are unavailable
- Try-catch blocks around critical operations
- User-friendly error messages in frontend
- Console logging for debugging and monitoring

## Development Guidelines

### File Organization
- Backend logic in `src/backend/` directory
- Frontend assets in `public/` directory  
- Single TypeScript entry point at root
- Configuration through environment variables and constants

### Coding Conventions
- Use Bun's native APIs when available (SQLite, file operations)
- Prefer TypeScript with proper type definitions
- Use async/await for asynchronous operations
- Follow existing import patterns and file structure

### Data Flow
1. USGS CSV feed → Ingestion service → SQLite database
2. Database → API endpoints → Frontend visualizations
3. Real-time updates via periodic data refresh (both backend and frontend)

## Deployment Considerations
- Single Bun process handles both server and data ingestion
- SQLite database persists in [data/](mdc:data/) directory
- Static assets served directly by HTTP server
- Environment-configurable port (default 8080)