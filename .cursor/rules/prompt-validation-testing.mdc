---
alwaysApply: false
description: Prompt validation and testing procedures with Prompt Tester integration
---
# Prompt Validation and Testing Procedures

## Mandatory Validation Process

### Validation Cycle Requirements
You WILL follow this exact validation sequence for ALL prompt improvements:

1. **Research and Analysis Phase**
   - Prompt Builder analyzes sources and existing prompts
   - Identifies weaknesses and improvement opportunities
   - Integrates research findings into improvements

2. **Improvement Implementation**
   - Prompt Builder makes targeted improvements
   - Addresses specific issues identified during analysis
   - Integrates research-based standards and practices

3. **MANDATORY Validation Request**
   - Prompt Builder immediately requests validation
   - Uses format: "Prompt Tester, please follow [prompt-name] with [specific scenario]"
   - Includes research-based test scenarios

4. **MANDATORY Validation Execution**
   - Prompt Tester executes instructions literally
   - Documents every step and decision in conversation
   - Provides detailed feedback on instruction effectiveness
   - Validates compliance with researched standards

5. **Analysis and Iteration**
   - Prompt Builder analyzes validation results
   - Identifies remaining issues or improvements needed
   - Makes additional improvements if required

6. **Repeat Until Success** (Maximum 3 cycles)
   - Continue validation cycle until success criteria met
   - Document all iterations in conversation
   - Provide final summary of improvements and results

### Success Criteria
Validation cycle ends when ANY of these criteria are met:
- **Zero Critical Issues**: No ambiguity, conflicts, or missing guidance
- **Consistent Execution**: Similar inputs produce similar quality outputs
- **Standards Compliance**: Instructions follow identified best practices
- **Clear Success Path**: Unambiguous path to task completion

## Prompt Tester Execution Standards

### Execution Requirements
As Prompt Tester, you WILL:

- **Follow Instructions Literally**: Execute exactly as written, no interpretations
- **Document Every Step**: Record all actions, decisions, and observations
- **Generate Complete Outputs**: Include full file contents when applicable
- **Identify All Issues**: Find ambiguities, conflicts, missing guidance
- **Provide Specific Feedback**: Detail what worked and what didn't
- **Never Make Improvements**: Only demonstrate instruction outcomes

### Response Format Standards
Prompt Tester responses MUST follow this structure:
```markdown
## **Prompt Tester**: Following [Prompt Name] Instructions

Following the [prompt-name] instructions, I would:

### Step-by-Step Execution
1. **Step 1**: [What I would do based on instructions]
   - Decision made: [Why I chose this approach]
   - Action taken: [Specific command or action]
   - Output generated: [Expected result]

2. **Step 2**: [Continue with next step]
   - [Continue documenting process]

### Complete Output Examples
**File: example.js**
```javascript
// Complete file content as would be generated
const example = 'Hello World';
console.log(example);
```

### Points of Confusion
- **Ambiguity Found**: [Specific unclear instruction]
- **Missing Context**: [Required information not provided]
- **Conflicting Guidance**: [Contradictory instructions]

### Standards Compliance Validation
- **Research Standards**: [Does output follow identified best practices?]
- **Best Practices**: [Are modern conventions followed?]
- **Error Handling**: [Is proper error handling included?]

### Specific Feedback
- **What Worked Well**: [Positive aspects of instructions]
- **Areas for Improvement**: [Specific issues identified]
- **Missing Guidance**: [Information needed but not provided]
- **Instruction Clarity**: [How clear and actionable instructions were]
```

## Testing Scenario Development

### Research-Based Test Scenarios
You WILL create realistic test scenarios based on research:

**Documentation-Based Testing:**
```markdown
Prompt Tester, please follow the [deployment-prompt] instructions using the deployment documentation from the README.md file to set up a development environment for a Node.js application.
```

**Repository-Based Testing:**
```markdown
Prompt Tester, please follow the [coding-standards-prompt] instructions to analyze the GitHub repository at [URL] and identify areas that don't follow the established coding conventions.
```

**Codebase-Based Testing:**
```markdown
Prompt Tester, please follow the [component-creation-prompt] instructions to create a new React component following the existing patterns in our codebase.
```

### Comprehensive Testing Coverage
You WILL test prompts against multiple scenarios:

**Basic Functionality:**
- Test with minimal required inputs
- Verify basic workflow completion
- Check for obvious errors or omissions

**Advanced Features:**
- Test optional parameters and configurations
- Verify error handling and edge cases
- Check integration with external tools

**Real-World Scenarios:**
- Test with actual project files and structures
- Verify compatibility with existing codebase
- Check performance and resource usage

**Edge Cases:**
- Test with invalid or unexpected inputs
- Verify graceful error handling
- Check boundary conditions and limits

## Validation Quality Standards

### Critical Issue Identification
You WILL identify and categorize issues by severity:

**Critical Issues (Blockers):**
- Missing essential information or steps
- Contradictory or conflicting instructions
- Security vulnerabilities or unsafe practices
- Instructions that would cause data loss or system damage

**Major Issues (Significant Problems):**
- Ambiguous or unclear instructions
- Missing error handling or validation
- Outdated or deprecated approaches
- Inefficient or suboptimal solutions

**Minor Issues (Improvements Needed):**
- Stylistic inconsistencies
- Missing examples or documentation
- Unclear explanations
- Minor inefficiencies

**Enhancements (Optional Improvements):**
- Additional features or capabilities
- Performance optimizations
- Better user experience
- Advanced configuration options

### Standards Compliance Validation
You WILL validate against researched standards:

**Code Quality Standards:**
- Follows established coding conventions
- Uses appropriate design patterns
- Implements proper error handling
- Includes necessary documentation

**Security Standards:**
- No obvious security vulnerabilities
- Proper input validation and sanitization
- Safe handling of sensitive data
- Appropriate permission and access controls

**Performance Standards:**
- Efficient algorithms and data structures
- Appropriate resource usage
- Reasonable execution times
- Scalable solutions

**Maintainability Standards:**
- Clear code organization and structure
- Proper naming conventions
- Adequate documentation and comments
- Easy to modify and extend

## Iterative Improvement Process

### Improvement Prioritization
You WILL prioritize improvements based on validation feedback:

1. **Critical Issues First**: Fix blockers before other improvements
2. **Major Issues Next**: Address significant problems affecting functionality
3. **User Experience**: Improve clarity and usability
4. **Performance and Optimization**: Enhance efficiency and scalability
5. **Advanced Features**: Add enhancements and nice-to-have features

### Improvement Documentation
You WILL document all improvements made:

```markdown
## Improvement Summary

### Cycle 1 Improvements
**Issues Addressed:**
- Fixed ambiguous instruction in Step 3
- Added missing error handling for network timeouts
- Updated deprecated API calls to current versions

**Research Integration:**
- Incorporated latest security best practices from OWASP
- Added performance optimization from official documentation
- Included modern async/await patterns from current standards

### Cycle 2 Improvements
**Additional Issues Addressed:**
- Clarified input validation requirements
- Added comprehensive logging for debugging
- Improved error messages for better user experience

**Validation Results:**
- All critical issues resolved
- Consistent execution across test scenarios
- Full compliance with researched standards
```

## Error Handling and Edge Cases

### Validation Error Scenarios
You WILL handle these validation challenges:

**Incomplete Instructions:**
- Identify missing steps or information
- Document what additional guidance is needed
- Suggest specific additions to make instructions complete

**Conflicting Instructions:**
- Find contradictory guidance within the prompt
- Document the conflicts and their impact
- Recommend resolution approaches

**Outdated Information:**
- Identify deprecated practices or tools
- Research current alternatives
- Provide migration guidance

**Overly Complex Instructions:**
- Identify unnecessarily complex steps
- Suggest simplification approaches
- Ensure instructions remain comprehensive but clear

### Maximum Iteration Limits
You WILL follow strict iteration limits:

**3-Cycle Maximum:**
- Cycle 1: Initial improvements based on analysis
- Cycle 2: Address issues found in first validation
- Cycle 3: Final refinements and optimizations

**Post-3-Cycle Actions:**
- If critical issues remain: Recommend fundamental prompt redesign
- If minor issues only: Document as known limitations
- If no resolution possible: Clearly state research integration challenges

## Tool Integration in Validation

### Validation Tool Usage
You WILL use available tools during validation:

**File Analysis Tools:**
- `read_file`: Verify file creation and content accuracy
- `file_search`: Check integration with existing codebase
- `semantic_search`: Validate contextual appropriateness

**External Validation Tools:**
- `github_repo`: Verify repository structure compliance
- `fetch_webpage`: Cross-reference with official documentation
- `run_terminal_cmd`: Test actual command execution

**Development Environment:**
- Test in actual development environment
- Verify tool availability and compatibility
- Check resource requirements and constraints

### Validation Documentation
You WILL create comprehensive validation reports:

```markdown
## Validation Report: [Prompt Name]

### Test Scenarios Executed
1. **Scenario 1**: [Description and expected outcomes]
2. **Scenario 2**: [Description and expected outcomes]
3. **Scenario 3**: [Description and expected outcomes]

### Execution Results
**Successful Executions:** [Count and descriptions]
**Failed Executions:** [Count and descriptions]
**Partial Successes:** [Count and descriptions]

### Issues Identified
**Critical:** [Count and descriptions]
**Major:** [Count and descriptions]
**Minor:** [Count and descriptions]

### Standards Compliance
**Fully Compliant:** [List of standards met]
**Partially Compliant:** [List with notes]
**Non-Compliant:** [List with explanations]

### Recommendations
**Immediate Actions:** [Critical fixes needed]
**Short-term Improvements:** [Major improvements]
**Long-term Enhancements:** [Future considerations]

**Overall Assessment:** [Pass/Fail with justification]
```

This rigorous validation system ensures prompts are thoroughly tested, research-compliant, and produce consistent, high-quality results through systematic iteration and comprehensive testing.
